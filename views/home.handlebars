<script src="/socket.io/socket.io.js"></script>
<header id="me">{{{ username }}}</header>
<main class="main">
    <table border="1">
        <tbody id="tbody1">
            <!-- таблица для доски -->
        </tbody>
    </table>
    <table border="1" style="opacity: 0.5;">
        <tbody id="tbody2">
            <!-- таблица для доски напарника-->
        </tbody>
    </table>

    <a href="/exit">Выйти</a>
</main>

<script>



    class PlayField{
        constructor(bottomCheckersColor = 'black'){
            this.cells = [];                    // поля игровой доски
            this.currentMove = 'white';         // кто сейчас ходит
            this.selectedChecker = null;        // выбранная для хода шашка
            this.bottomCheckersColor = bottomCheckersColor; // цвет шашек в нижней части, то есть каким цветом ходит игрок
        }

        setSocket(socket){
            this.socket = socket;
            this.socket.on('move', (checkerData) => {
                let xFrom = checkerData.xFrom;
                let yFrom = checkerData.yFrom;
                let cellFrom = this.cells[yFrom][xFrom];
                let checker = cellFrom.checker;

                let xTo = checkerData.xTo;
                let yTo = checkerData.yTo;
                let cellTo = this.cells[yTo][xTo];

                try{
                    this.makeMove(checker, cellTo);
                }
                catch(e){
                    console.error(e.message);
                }
            });
        }

        // совершение хода и его обработка
        makeMove(checkerFrom, cellTo){
            // перед отправкой хода проверяем его валидность и делаем его
            let cellEated = checkerFrom.goTo(cellTo);
            // продолжаем ходить если съели шашку противника            
            // и есть еще шашки противника для съедения
            let needToChangeColor = true;        
            if (cellEated){
                let eatableCells = checkerFrom.checkForEatableCells();
                if(eatableCells.length > 0){
                    needToChangeColor = false;
                }
            }
            this.endMove(needToChangeColor);
        }

        // завершение хода и смена ходящего при необходимости
        endMove(needToChangeColor = true){
            if(this.highlightedCells){
                this.highlightedCells.forEach(cell => cell.removeHighLight());
            }

            if(needToChangeColor){
                this.currentMove = this.currentMove == 'white' ? 'black' : 'white';
            }

            // проход по клеткам игрового поля и проверка на необходимость поедания
            // шашки противника
            this.highlightedCells = [];
            for(let y = 0; y < this.cells.length; y++){
                for(let x = 0; x < this.cells.length; x++){
                    let cell = this.cells[y][x];
                    if(cell == null) continue;
                    if(cell.checker == null) continue;
                    if(cell.checker.color != this.currentMove) continue;
                    let eatableCells = cell.checker.checkForEatableCells();
                    if(eatableCells.length > 0){
                        eatableCells.forEach(innerCell => {
                            innerCell.highLightMe();
                            this.highlightedCells.push(innerCell);
                        });
                    }
                }
            }
        }

        createGameField(numTable){
            const tbody = document.getElementById('tbody' + numTable);
            for(var i = 0; i < 8; i++){
                const row = document.createElement('tr');
                this.cells.push([]);
                for(var j = 0; j < 8; j++){
                    var color = (j + i) % 2  == 0 ? 'white' : 'black';
                    var td = document.createElement('td');
                    td.style.backgroundColor = color;

                    var checker = null;
                    if(color == 'black' && i != 3 && i != 4){
                        let shashka = document.createElement('div');

                        // checker init
                        var checkerColor = this.bottomCheckersColor == 'black' ? 'white' : 'black';
                        if(i > 4) checkerColor = this.bottomCheckersColor == 'black' ? 'black' : 'white';
                        checker = new Checker(shashka, checkerColor, j, i, this);

                        td.appendChild(shashka);
                    }
                    this.cells[i].push(new Cell(td, j, i, this, checker));
                    row.appendChild(td);
                }
                tbody.appendChild(row);
            }
        }

    }

    class Cell{
        constructor(tag, x, y, playField, checker = null){
            if (!this.inBounds(x, y)) throw new Error('invalid cell coordinates');
            this.x = x;
            this.y = y;
            this.tag = tag;
            this.pf = playField;
            this.checker = checker;

            this.tag.addEventListener('click', (e) => {
                if(this.pf.selectedChecker == null) return;
                if(this.pf.selectedChecker.x == this.x && this.pf.selectedChecker.y == this.y) return;

                console.log(`selected field - ${this.x};${this.y}`);
                
                this.pf.selectedChecker.removeHighLight();
                const data = {
                    username: me,
                    xFrom: this.pf.selectedChecker.x,
                    yFrom: this.pf.selectedChecker.y,
                    xTo: this.x,
                    yTo: this.y
                };

                try{
                    // игрок может ходить только одним цветом шашек
                    if(this.pf.selectedChecker.color != this.pf.bottomCheckersColor) throw new Error('Not your checker color');
                    this.pf.makeMove(this.pf.selectedChecker, this);

                    this.pf.socket.emit('move', data);
                    this.pf.selectedChecker = null;
                }
                catch(e){
                    console.error(e.message);
                    return;
                }
            });
        }

        setChecker(checker){
            this.tag.appendChild(checker.tag);
            this.checker = checker;
        }

        removeChecker(){
            this.tag.removeChild(this.checker.tag);
            this.checker = null;
        }

        inBounds(x, y){
            return x >= 0 && y >= 0 && x < 8 && y < 8;
        }

        highLightMe(){
            this.tag.style.backgroundColor = 'red';
        }

        removeHighLight(){
            this.tag.style.backgroundColor = 'black';
        }
    }

    class Checker {
        constructor(tag, color, i, j, playField){
            tag.classList.add('checker');
            if (color == 'black')      tag.classList.add('checker-black');
            else if (color == 'white') tag.classList.add('checker-white');
            else throw new Error("invalid color");
            if (!this.inBounds(j, i)) throw new Error('invalid checker coordinates');
            this.color = color;
            this.tag = tag;
            this.x = i;
            this.y = j;
            this.pf = playField;
            this.isQueen = false;

            this.tag.addEventListener('click', (e) => {
                if(this.pf.selectedChecker != null) this.pf.selectedChecker.removeHighLight();
                this.pf.selectedChecker = this;
                console.log(`touched - ${this.x};${this.y}`);
                this.highLightMe();
            });
        }

        highLightMe(){
            this.tag.style.opacity = '0.5';
        }
        removeHighLight(){
            this.tag.style.opacity = '1';
        }

        static formTag(color){
            const tag = document.createElement('div');
            tag.classList.add('checker');
            if (color == 'black')      tag.classList.add('checker-black');
            else if (color == 'white') tag.classList.add('checker-white');
            else throw new Error("invalid color");
            return tag;
        }

        // Лежит ли поле на одной диагонали с шашкой и черное ли оно
        checkFieldForMove(x, y){
            return Math.abs(x - this.x) === Math.abs(y - this.y) && (x + y) % 2 != 0;
        }

        inBounds(x, y){
            return x >= 0 && y >= 0 && x < 8 && y < 8;
        }

        // проверка на возможность съесть шашку
        // вокруг текущей
        checkForEatableCells(){
            let x = this.x;
            let y = this.y;
            let eatableCells = [];
            let directions = {
                leftUp: {x: -1, y: -1},
                rightUp: {x: 1, y: -1},
                leftDown: {x: -1, y: 1},
                rightDown: {x: 1, y: 1}
            };
            let maxDistance = this.isQueen ? 6 : 1;
            for(let i = 1; i <= maxDistance; i++){
                for(let dir in directions){
                    let newX = x + directions[dir].x * i;
                    let newY = y + directions[dir].y * i;
                    if(!this.inBounds(newX, newY)) continue;
                    let cell = this.pf.cells[newY][newX];
                    if(cell.checker == null) continue;
                    if(cell.checker.color == this.color) continue;
                    // код ниже сработает если была найдена шашка противника
                    let nextX = x + directions[dir].x * (i + 1);
                    let nextY = y + directions[dir].y * (i + 1);
                    if(!this.inBounds(nextX, nextY)) continue;
                    let nextCell = this.pf.cells[nextY][nextX];
                    if(nextCell.checker != null) continue;
                    eatableCells.push(cell);
                }
            }
            return eatableCells;
        }

        // метод для перемещения шашки на другую клетку
        // не проверяет цвет шашки, которой ходит игрок.
        // Это делается в Cell.constructor
        // Возвращет true если ходом была съедена шашка противника
        goTo(cell){
            let x = cell.x;
            let y = cell.y;
            
            if(this.pf.currentMove != this.color) throw new Error('Not your move');
            if(!this.checkFieldForMove(x, y) || !this.inBounds(x, y)) throw new Error('Not valid move');
            if (pf.cells[y][x].checker != null) throw new Error('Theres already another checker');
            if (pf.cells[this.y][this.x].checker == null) throw new Error('Current cell is empty');

            let distance = this.y - y; // дистанция хода. Больше нуля - вверх, меньше - вниз
            if (distance == 0) throw new Error('0 distance move');
            if (!this.isQueen && distance > 2) throw new Error('Too far move for not-a-queen checker');
            if (
                (!this.isQueen && distance == -1 && this.color == pf.bottomCheckersColor) || 
                (!this.isQueen && distance == 1 && this.color != pf.bottomCheckersColor) // проверка на ход назад
            ) throw new Error('Cant go back if not a queen');

            let oldCell = pf.cells[this.y][this.x];
            let isCellEated = false; // была ли съедена шашка врага во время хода
            if (Math.abs(distance) > 1){ // либо ходит дамка, либо кого то щас съедят, либо и то и то
                let xSign = Math.sign(x - this.x); // получаем знаки для координатных осей
                let ySign = Math.sign(y - this.y);
                let eatenCell = null; // клетка с шашкой, которую планируется съесть
                for(let i = 1; i <= Math.abs(distance); i++){
                    // одна из клеток на диагонали поедания
                    let newX = this.x + i * xSign;
                    let newY = this.y + i * ySign;

                    let innerCell = pf.cells[newY][newX];
                    if (innerCell.checker == null) continue;
                    if (innerCell.checker.color == oldCell.checker.color) throw new Error('cant eat your checkers');
                    if (eatenCell != null) throw new Error('cant eat more then 1 checker at a time');
                    eatenCell = innerCell;
                }
                // если был ход на дистанцию 2, там не было что есть, а шашка не дамка
                if (eatenCell == null && !this.isQueen) throw new Error('too far move for not-a-queen checker');
                if(eatenCell){
                    eatenCell.removeChecker(); // съедена
                    isCellEated = true;
                }
            }

            this.x = x;
            this.y = y;
            if (this.y == 0 || this.y == 7) this.isQueen = true;

            oldCell.removeChecker();
            cell.setChecker(this);
            return isCellEated;
        }
    }

    const me = document.getElementById('me').innerText;
    const pf = new PlayField();
    
    const socket = io();
    var gameStarted = false;
    pf.setSocket(socket);
    socket.emit('startingGame', me); // запрос на привязку текущего сокета к игроку для обработки мультиплеерных запросов

    socket.emit('getPairs'); // получить играющие пары и начать игру
    socket.on('setPairs', (pairs) => {
        if(gameStarted) return; // если игра уже началась - не нужно ничего делать
        console.table(pairs);
        pairs.forEach(pair => {
            if(pair.includes(me)){
                if(pair[0] == me){
                    // если я первый в паре, то я хожу белыми
                    pf.bottomCheckersColor = 'white';
                }
                else{
                    // если я второй в паре, то я хожу черными
                    pf.bottomCheckersColor = 'black';
                }
                pf.createGameField(1);
                gameStarted = true;
            }
        });
    });

    socket.on('error', (message) => {
        confirm(`Ошибка: ${message}`);
    });
    
</script>
